ifelse(Month %in% c(6,7,8),
4,1))))
pca_df2 <- Muttama_wrain %>%
dplyr::select(site_m, x, y, cl_meq_l, no3_meq_l, br_meq_l, so4_meq_l,
hco3_meq_l, na_meq_l, ca_meq_l, mg_meq_l, k_meq_l,
Seasons, Rainfall, gw_or_sw) %>%
drop_na() %>%
mutate_if(is.character, as.factor)
# Prettier biplot
fviz_pca_biplot(pca2,
label='var',
fill.ind=as.factor(pca_df2$site_m),
col.ind='white',
pointshape=21) +
labs(fill='site_m')
pca_df2 <- Muttama_wrain %>%
dplyr::select(site_m, x, y, cl_meq_l, no3_meq_l, br_meq_l, so4_meq_l,
hco3_meq_l, na_meq_l, ca_meq_l, mg_meq_l, k_meq_l,
Seasons, Rainfall, gw_or_sw) %>%
#drop_na() %>%
mutate_if(is.character, as.factor)
pca2 = prcomp(pca_df2 %>% dplyr::select(c(-site_m)), scale=TRUE)
pca_df2 <- Muttama_wrain %>%
dplyr::select(site_m, x, y, cl_meq_l, no3_meq_l, br_meq_l, so4_meq_l,
hco3_meq_l, na_meq_l, ca_meq_l, mg_meq_l, k_meq_l,
Seasons, Rainfall, gw_or_sw) %>%
drop_na() %>%
mutate_if(is.character, as.factor)
pca2 = prcomp(pca_df2 %>% dplyr::select(c(-site_m)), scale=TRUE)
# Prettier biplot
fviz_pca_biplot(pca2,
label='var',
fill.ind=as.factor(pca_df2$site_m),
col.ind='white',
pointshape=21) +
labs(fill='site_m')
# Prettier biplot
fviz_pca_biplot(pca2,
label='var',
fill.ind=as.factor(pca_df2$site_m),
col.ind='white',
pointshape=21) +
labs(fill='Site')
ggsave("maps/pca_biplot.png",unit="cm",dpi=300)
ggsave("Figures/pca_biplot.png",unit="cm",dpi=300)
knitr::include_graphics("Figures/pca_biplot.png")
#Muttama_pca.rmd
knitr::include_graphics("Figures/gw_or_sw_map.png")
#Muttama_maps.rmd
View(Muttama)
tlmgr update --self --all
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex(force = TRUE)
tinytex:tlmgr_update()
tinytex::tlmgr_update()
tinytex::install_tinytex()
tinytex::reinstall_tinytex()
tinytex::install_tinytex()
tinytex::tlmgr_update()
install.packages('rmarkdown')
warnings()
install.packages('rmarkdown')
tinytex::check_installed()
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex(force = T)
tinytex::install_tinytex(force = T)
tinytex::install_tinytex(force = T)
tinytex::install_tinytex()
library(shiny)
runGitHub("R-SWAT", "tamnva")
library(shiny)
runApp("RSWAT_folder")
runGitHub("R-SWAT", "tamnva")
requiredPackages <- c('foreach',         # version >= 1.5.2
'doParallel',      # version >= 1.0.17
'lhs',             # version >= 1.1.4
'plotly',          # version >= 4.10.0
'ggplot2',         # version >= 3.5-15
'shiny',           # version >= 1.7.1
'shinyjs',
'shinydashboard',  # version >= 0.7.2
'shinyFiles',      # version >= 0.9.1
'tippy',           # version >= 0.1.0
'excelR',          # version >= 0.4.0
'sensitivity',     # version >= 1.27.0
'boot',            # version >= 1.3-24
'optimization',    # version >= 1.0-9
'hydroPSO',        # version >= 0.5-1
'nloptr',          # version >= 2.0.0
'spsComps')        # version >= 0.3.2.1)
# Check and install only missing packages
install.packages(setdiff(requiredPackages, rownames(installed.packages())), dependencies = TRUE)
warnings()
# Update these packages if it has not been updated
update.packages(requiredPackages, ask = FALSE)
# Load dependency packages
suppressMessages(suppressWarnings(lapply(requiredPackages, library, character.only = TRUE)))
install.packages("htmltools")
install.packages("htmltools")
# Check and install only missing packages
install.packages(setdiff(requiredPackages, rownames(installed.packages())), dependencies = TRUE)
runApp("RSWAT_folder")
library(shiny)
runApp("RSWAT_folder")
runApp('R-SWAT-master')
runif(1,-10,10)
round(runif(1,-10,10))
round(runif(1,-15,10))
?pander::pander
library(shiny)
runApp("C:/Users/rver4657/OneDrive - The University of Sydney (Staff)/Documents/R-SWAT-master")
update.packages()
require(tidyverse)
install.packages("rlang)")
install.packages("rlang")
require(tidyverse)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
require(tidyverse)
install.packages("tidyselect")
update.packages()
require(tidyverse)
?map2_df
require(purr)
require(purrr)
month <- c(1,3,5,6,8,NA, 1,2,6,9,10, NA)
month <- replace(month[is.na(month)], 12)
?replace
month <- replace(month,month[is.na(month)], 12)
month <- replace(month,month[is.na(month)=T], 12)
month <- replace(month,month[is.na(month)==T], 12)
month[is.na(month)==T]
replace(month,month[is.na(month)==T],12)
replace(month,is.na(month)==T,12)
?hmd
require(lubridate)
?hmd
?ymd
?j
?jday
?yday
?jy
require(lubridate)
ymd("2001-01-01") + 180
require(tidyverse)
?write_delin
?write_delim
?read.table
require(tidyverse)
?read_table
require(mgcv)
?gam
?ts
?mgcv::ts
?s
?apply
?write.csv
?write_csv
# see the supplementary material in Slingsby et al. 2021
require(tidyverse)
?write_csv
setwd("C:/Users/rver4657/Dropbox (Sydney Uni)/Research/Forest_and_water/data/PaperData/Jonkershoek")
require(lubridate)
# function to read the streamflow data
stream <- function(name) {
if(require(tidyverse)==F) require(tidyverse)
if(require(lubridate)==F) require(lubridate)
# read in the data and format date and time
data <- read_csv(name) %>%
mutate(DateTime = ymd_hms(Date),
Date = date(DateTime))
return(data)
}
# function to read rainfall data
rain <- function(name) {
# read in the data and format date and time
data <- read_csv(paste0("rainfall/",name)) %>%
mutate(DateTime = ymd_hms(Date),
Date = date(DateTime))
return(data)
}
# merge two datasets by date
merge_data <- function(data1, data2) {
# assumes both datasets have a column called "Date"
out_data <- left_join(data1,data2, by = "Date")
return(out_data)
}
# summarise by year
summarise_by_year <- function(data) {
data <- data %>%
group_by(Year = year(Date)) %>%
summarise(Annual_value = sum(Value, na.rm =T))
}
# import and merge multiple rainfall stations
rain_import <- function(rain_station_list) {
# loop through list of stations
for (j in 1:length(rain_station_list)) {
# open the rainfall data file(s)
file_r <- rain(rain_station_list[j])
# merge rainfall data files
if (i == 1) {
rain_t <- file_r
} else {
rain_t <- left_join(rain_t, file_r, by= "Date")
}
}
return(rain_t)
}
# function to summarise across columns of rainfall data and calculate annual
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
summarise_if(is.numeric, mean, na.rm = TRUE)
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# find name from site
find_site_name <- function(name) {
# using Kent stream recorder files
end <- str_locate(name,"_K")
site <- substr(name,0,(end[1]-1))
return(site)
}
# Overview of raingauges
rain_gauge <- list("Bosboukloof" = c("5A","5B","11A","11B","25A","25B"),
"Biesievlei" = c("12A","12B"),
"Tierkloof" = c("6B", "9B", "13B"),
"Lambrechtsbos-B" = c("15A", "15B"),
"Lambrechtsbos-A" = c("10A", "10B"),
"Langrivier" = c("4A", "4B", "8A", "8B", '14A', "14B"))#,
#"swartboskloof" = c("26B", "27B", "28B", "29B",
#"30B", "31B", "32B"))
# treatment years
treatment <- list("Bosboukloof" = 1940,
"Biesievlei" = 1948,
"Tierkloof" = 1956,
"Lambrechtsbos-B" = 1964,
"Lambrechtsbos-A" = 1974,
"Langrivier" = NA)#,
#"swartboskloof" = c("26B", "27B", "28B", "29B",
#"30B", "31B", "32B"))
Kentfilelist <- list.files(pattern = "Kent")
Belfortfilelist <- list.files(pattern="Belfort")
rainfiles <- list.files(path = "rainfall")
all_data <- list()
i <- 2
i <- 1
# load the Kent recorder file
Kent_data <- stream(Kentfilelist[i])
# load the Belfort recorder file
Belfort_data <- stream(Belfortfilelist[i])
# calculate the annual flows
stream_annual <- summarise_by_year(stream_data)
# merge both files
stream_data <- merge_data(Belfort_data, Kent_data)
# calculate the annual flows
stream_annual <- summarise_by_year(stream_data)
View(Belfort_data)
View(Belfort_data)
View(Kent_data)
View(stream_data)
merge_data <- function(data1, data2, by_in = "Date") {
# assumes both datasets have a column called "Date"
out_data <- left_join(data1,data2, by = by_in)
return(out_data)
}
# merge both files
stream_data <- merge_data(Belfort_data, Kent_data, by_in = c("Date", "Value"))
View(stream_data)
View(stream_data)
# calculate the annual flows
stream_annual <- summarise_by_year(stream_data)
View(stream_annual)
# find the name of the site
site <- find_site_name(Kentfilelist[i])
rain_g <- rain_gauge[grep(site,names(rain_gauge))][[1]]
# read in and merge
rain_data <- rain_import(rain_g)
rainfiles[grep(rain_g,rainfiles)]
rain_import <- function(rain_station_list) {
# loop through list of stations
for (j in 1:length(rain_station_list)) {
# open the rainfall data file(s)
file_r <- rain(rainfiles[grep(rain_station_list[j],rainfiles)])
# merge rainfall data files
if (i == 1) {
rain_t <- file_r
} else {
rain_t <- left_join(rain_t, file_r, by= "Date")
}
}
return(rain_t)
}
# read in and merge
rain_data <- rain_import(rain_g)
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
View(rain_data)
summarise_by_year <- function(data) {
data <- data %>%
group_by(Year = year(ymd(Date))) %>%
summarise(Annual_value = sum(Value, na.rm =T))
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
View(rain_data)
str(rain_data)
year(rain_data$Date)
summarise_by_year <- function(data) {
data <- data %>%
group_by(Year = year(Date)) %>%
summarise(Annual_value = sum(Value, na.rm =T))
}
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
summarise_if(is.numeric, mean, na.rm = TRUE)
browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
str(rain_input)
View(rain_data)
rain_import <- function(rain_station_list) {
# loop through list of stations
for (j in 1:length(rain_station_list)) {
# open the rainfall data file(s)
file_r <- rain(rainfiles[grep(rain_station_list[j],rainfiles)])
# merge rainfall data files
if (i == 1) {
rain_t <- file_r
browser()
} else {
rain_t <- left_join(rain_t, file_r, by= c("Date","Value"))
}
}
return(rain_t)
}
# read in and merge
rain_data <- rain_import(rain_g)
View(rain_t)
rain_import <- function(rain_station_list) {
# loop through list of stations
for (j in 1:length(rain_station_list)) {
# open the rainfall data file(s)
file_r <- rain(rainfiles[grep(rain_station_list[j],rainfiles)])
# merge rainfall data files
if (j == 1) {
rain_t <- file_r
#browser()
} else {
rain_t <- left_join(rain_t, file_r, by= c("Date","Value"))
}
}
return(rain_t)
}
# read in and merge
rain_data <- rain_import(rain_g)
View(rain_data)
# import and merge multiple rainfall stations
rain_import <- function(rain_station_list) {
# loop through list of stations
for (j in 1:length(rain_station_list)) {
# open the rainfall data file(s)
file_r <- rain(rainfiles[grep(rain_station_list[j],rainfiles)])
# merge rainfall data files
if (j == 1) {
rain_t <- file_r
#browser()
} else {
rain_t <- left_join(rain_t, file_r, by= "Date")
}
}
return(rain_t)
}
# read in and merge
rain_data <- rain_import(rain_g)
View(rain_data)
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
across(starts_with("Value"), mean, na.rm = TRUE)
#browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
summarise(across(starts_with("Value"), mean, na.rm = TRUE))
#browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
summarise(across(starts_with("Value"), ~mean(.x, na.rm = TRUE)))
#browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
# find name from site
find_site_name <- function(name) {
# using Kent stream recorder files
end <- str_locate(name,"_K")
site <- substr(name,0,(end[1]-1))
return(site)
}
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
summarise(across(starts_with("Value"), ~mean(.x, na.rm = TRUE)))
browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
View(rain_input)
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
rowwise(Date) %>%
summarise(Value = mean(starts_with("Value")))
browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
rowwise(Date) %>%
summarise(Value = mean(select(starts_with("Value"))))
browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
rowwise(Date) %>%
summarise(Value = mean(2:ncol(rain_input)))
browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
View(rain_input)
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
rowwise(Date) %>%
summarise(Value = apply(2:ncol(rain_input),1,mean))
browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
rain_summary <- function(rain_input) {
# summarise across the numeric columns (rainfall)
rain_input <- rain_input %>%
rowwise(Date) %>%
summarise(Value = apply(rain_input[,2:ncol(rain_input)],1,mean))
browser()
# calculate annual rainfall
rain_annual <- summarise_by_year(rain_input) %>%
rename("annual_rain" = "annual_value")
return(rain_annual)
}
# summarise rainfall to annual
rain_data_annual <- rain_summary(rain_data)
